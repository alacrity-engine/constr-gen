package {{ pkgPathBase .pkgPath }}

import (
    {{ range $import, $_ := .imports }}
    {{- $import }}
    {{ end }}
)

func (comp *{{ $.componentTypeName }}) TypeID() string {
    return "{{ pkgPathSlug $.pkgPath }}__{{ $.componentTypeName }}"
}

func PUBLIC___{{ pkgPathSlug .pkgPath }}__{{ .componentTypeName }}___Create() engine.Component {
    return &{{ .componentTypeName }}{}
}

{{ range $field := .fields }}
func PUBLIC___{{ pkgPathSlug $.pkgPath }}__{{ $.componentTypeName }}___Get{{ $field.Name }}(comp engine.Component) interface{} {
    typedComp := comp.(*{{ $.componentTypeName }})
    return typedComp.{{ $field.Name }}
}

func PUBLIC___{{ pkgPathSlug $.pkgPath }}__{{ $.componentTypeName }}___Set{{ $field.Name }}(comp engine.Component, value interface{}) {
    typedComp := comp.(*{{ $.componentTypeName }})
    {{- if $field.IsArray }}
    arrIn := value.([]interface{})
    arrTyp := make([]{{ stripArrBrackets $field.Type }}, 0, len(arrIn))

    for i := 0; i < len(arrIn); i++ {
        arrTyp = append(arrTyp, arrIn[i].({{ stripArrBrackets $field.Type }}))
    }

    typedComp.{{ $field.Name }} = arrTyp
    {{- else }}
    typedComp.{{ $field.Name }} = value.({{ $field.Type }})
    {{ end }}
}
{{ end }}